(define (mirror x)
  (case x
    ((nil) (return (make nil)))
    ((cons x1 xs)
     (case (du (make tuple x1))
       ((tuple y1 y2)
        (let ((ys) (mirror xs))
	  (let ((zs) (snoc ys y2))
	    (return (make cons y1 zs)))))))))

(define (snoc x y)
  (case x
    ((nil) (return (make cons y (make nil))))
    ((cons x1 xs) (let ((z) (snoc xs y))
                    (return (make cons x1 z))))))