(define (pack-bin s)
  (case s
    ((nil) (return (make nil)))
    ((cons s1 ss) (let ((p) (sub s1 (make 1) ss))
                    (return p)))))

(define (sub t n s)
  (case s
    ((nil) (return (make cons (make pair t n) (make nil))))
    ((cons s1 ss)
     (case (eq (make tuple t s1))
       ((tuple u) (let ((m) (inc n))
                    (let ((p) (sub u m ss))
                      (return p))))
       ((tuple t2 s2) (let ((p) (sub s2 (make 1) ss))
                        (return (make cons (make pair t2 n) p))))))))

(define (inc x)
  (case x
    ((1) (return (make cons (make 0) (make 1))))
    ((cons x1 xs)
     (case x1
       ((0) (return (make cons (make 1) xs)))
       ((1) (let ((m) (inc xs))
              (return (make cons (make 0) m))))))))