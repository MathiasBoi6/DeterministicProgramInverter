// Signature file for parser generated by fsyacc
module StackParser
type token = 
  | EOF
  | VAR of (string * Column)
  | NUM of (int * Column)
  | LPAR of (Column)
  | RPAR of (Column)
  | RBRA of (Column)
  | LBRA of (Column)
  | COMMA of (Column)
  | SEMI of (Column)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_VAR
    | TOKEN_NUM
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_RBRA
    | TOKEN_LBRA
    | TOKEN_COMMA
    | TOKEN_SEMI
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startparseStack
    | NONTERM_parseStack
    | NONTERM_parseInner
    | NONTERM_parseValue
    | NONTERM_commaSepValue
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val parseStack : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> ( Value list) 
