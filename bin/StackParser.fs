// Implementation file for parser generated by fsyacc
module StackParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "StackWriting\StackParser.fsp"


open AbSyn


# 12 "bin\StackParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | VAR of (string * Column)
  | NUM of (int * Column)
  | LPAR of (Column)
  | RPAR of (Column)
  | RBRA of (Column)
  | LBRA of (Column)
  | COMMA of (Column)
  | SEMI of (Column)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_VAR
    | TOKEN_NUM
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_RBRA
    | TOKEN_LBRA
    | TOKEN_COMMA
    | TOKEN_SEMI
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startparseStack
    | NONTERM_parseStack
    | NONTERM_parseInner
    | NONTERM_parseValue
    | NONTERM_commaSepValue

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | VAR _ -> 1 
  | NUM _ -> 2 
  | LPAR _ -> 3 
  | RPAR _ -> 4 
  | RBRA _ -> 5 
  | LBRA _ -> 6 
  | COMMA _ -> 7 
  | SEMI _ -> 8 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_VAR 
  | 2 -> TOKEN_NUM 
  | 3 -> TOKEN_LPAR 
  | 4 -> TOKEN_RPAR 
  | 5 -> TOKEN_RBRA 
  | 6 -> TOKEN_LBRA 
  | 7 -> TOKEN_COMMA 
  | 8 -> TOKEN_SEMI 
  | 11 -> TOKEN_end_of_input
  | 9 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startparseStack 
    | 1 -> NONTERM_parseStack 
    | 2 -> NONTERM_parseStack 
    | 3 -> NONTERM_parseInner 
    | 4 -> NONTERM_parseInner 
    | 5 -> NONTERM_parseValue 
    | 6 -> NONTERM_parseValue 
    | 7 -> NONTERM_parseValue 
    | 8 -> NONTERM_commaSepValue 
    | 9 -> NONTERM_commaSepValue 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 11 
let _fsyacc_tagOfErrorTerminal = 9

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | VAR _ -> "VAR" 
  | NUM _ -> "NUM" 
  | LPAR _ -> "LPAR" 
  | RPAR _ -> "RPAR" 
  | RBRA _ -> "RBRA" 
  | LBRA _ -> "LBRA" 
  | COMMA _ -> "COMMA" 
  | SEMI _ -> "SEMI" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RPAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RBRA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LBRA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SEMI _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 2us; 3us; 9us; 10us; 4us; 65535us; 2us; 8us; 9us; 8us; 12us; 16us; 17us; 16us; 2us; 65535us; 12us; 13us; 17us; 18us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 11us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 2us; 3us; 4us; 1us; 3us; 1us; 3us; 2us; 5us; 7us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 2us; 8us; 9us; 1us; 8us; 1us; 8us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 13us; 15us; 17us; 20us; 22us; 24us; 27us; 29us; 31us; 33us; 35us; 38us; 40us; |]
let _fsyacc_action_rows = 19
let _fsyacc_actionTableElements = [|1us; 32768us; 6us; 2us; 0us; 49152us; 3us; 32768us; 1us; 11us; 2us; 15us; 5us; 6us; 1us; 32768us; 5us; 4us; 1us; 32768us; 0us; 5us; 0us; 16385us; 1us; 32768us; 0us; 7us; 0us; 16386us; 1us; 16388us; 8us; 9us; 2us; 32768us; 1us; 11us; 2us; 15us; 0us; 16387us; 1us; 16391us; 3us; 12us; 2us; 32768us; 1us; 11us; 2us; 15us; 1us; 32768us; 4us; 14us; 0us; 16389us; 0us; 16390us; 1us; 16393us; 7us; 17us; 2us; 32768us; 1us; 11us; 2us; 15us; 0us; 16392us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 7us; 9us; 11us; 12us; 14us; 15us; 17us; 20us; 21us; 23us; 26us; 28us; 29us; 30us; 32us; 35us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 4us; 3us; 3us; 1us; 4us; 1us; 1us; 3us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 16385us; 65535us; 16386us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 16389us; 16390us; 65535us; 65535us; 16392us; |]
let _fsyacc_reductions ()  =    [| 
# 128 "bin\StackParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  Value list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startparseStack));
# 137 "bin\StackParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Column in
            let _2 = parseState.GetInput(2) :?>  Value list in
            let _3 = parseState.GetInput(3) :?> Column in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "StackWriting\StackParser.fsp"
                                                           _2
                   )
# 29 "StackWriting\StackParser.fsp"
                 :  Value list));
# 150 "bin\StackParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Column in
            let _2 = parseState.GetInput(2) :?> Column in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "StackWriting\StackParser.fsp"
                                                 [] 
                   )
# 30 "StackWriting\StackParser.fsp"
                 :  Value list));
# 162 "bin\StackParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  Value  in
            let _2 = parseState.GetInput(2) :?> Column in
            let _3 = parseState.GetInput(3) :?>  Value list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "StackWriting\StackParser.fsp"
                                                             _1::_3 
                   )
# 34 "StackWriting\StackParser.fsp"
                 :  Value list));
# 175 "bin\StackParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  Value  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "StackWriting\StackParser.fsp"
                                                             [_1] 
                   )
# 35 "StackWriting\StackParser.fsp"
                 :  Value list));
# 186 "bin\StackParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Column in
            let _2 = parseState.GetInput(2) :?> Column in
            let _3 = parseState.GetInput(3) :?>  Value list  in
            let _4 = parseState.GetInput(4) :?> Column in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "StackWriting\StackParser.fsp"
                                                           Value.CONS ((fst _1), _3) 
                   )
# 39 "StackWriting\StackParser.fsp"
                 :  Value ));
# 200 "bin\StackParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int * Column in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "StackWriting\StackParser.fsp"
                                                           Value.NUM (fst _1) 
                   )
# 40 "StackWriting\StackParser.fsp"
                 :  Value ));
# 211 "bin\StackParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Column in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "StackWriting\StackParser.fsp"
                                                           Value.CONS ((fst _1), []) 
                   )
# 41 "StackWriting\StackParser.fsp"
                 :  Value ));
# 222 "bin\StackParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  Value  in
            let _2 = parseState.GetInput(2) :?> Column in
            let _3 = parseState.GetInput(3) :?>  Value list  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "StackWriting\StackParser.fsp"
                                                               _1::_3
                   )
# 45 "StackWriting\StackParser.fsp"
                 :  Value list ));
# 235 "bin\StackParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  Value  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "StackWriting\StackParser.fsp"
                                                               [_1] 
                   )
# 46 "StackWriting\StackParser.fsp"
                 :  Value list ));
|]
# 247 "bin\StackParser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 12;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let parseStack lexer lexbuf :  Value list =
    engine lexer lexbuf 0 :?> _
