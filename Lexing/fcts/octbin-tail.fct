(define (octbin xs)
  (let ((z) (octbin_tail xs (make id)))
    (return z)))

(define (octbin_tail xs0 k)
  (case xs0
    ((cons x1 xs1)
      (case x1
        ((0)
          (let ((z0) (octbin_tail xs1 (make cont0 k)))
            (return z0)))
        ((1) 
          (case xs1
            ((nil)
              (let ((z1) (eval k (make nil)))
                (return z1)))
            ((cons x xs)
              (let ((z1) (octbin_tail (make cons x xs) (make cont1 k)))
                (return z1)))))
        ((2)
          (case xs1
            ((nil)
              (let ((z2) (eval k (make cons (make 0) (make nil))))
                (return z2)))
            ((cons x xs)
              (let ((z2) (octbin_tail (make cons x xs) (make cont2 k)))
                (return z2)))))
        ((3)
          (case xs1
            ((nil)
              (let ((z3) (eval k (make cons (make 1) (make nil))))
                (return z3)))
            ((cons x xs)
              (let ((z3) (octbin_tail (make cons x xs) (make cont3 k)))
                (return z3)))))
        ((4)
          (case xs1
            ((nil)
              (let ((z4) (eval k (make cons (make 0) (make cons (make 0) (make nil)))))
                (return z4)))
            ((cons x xs)
              (let ((z4) (octbin_tail (make cons x xs) (make cont4 k)))
                (return z4)))))
        ((5)
          (case xs1
            ((nil)
              (let ((z5) (eval k (make cons (make 1) (make cons (make 0) (make nil)))))
                (return z5)))
            ((cons x xs)
              (let ((z5) (octbin_tail (make cons x xs) (make cont5 k)))
                (return z5)))))
        ((6)
          (case xs1
            ((nil)
              (let ((z6) (eval k (make cons (make 0) (make cons (make 1) (make nil)))))
                (return z6)))
            ((cons x xs)
              (let ((z6) (octbin_tail (make cons x xs) (make cont6 k)))
                (return z6)))))
        ((7)
          (case xs1
            ((nil)
              (let ((z7) (eval k (make cons (make 1) (make cons (make 1) (make nil)))))
                (return z7)))
            ((cons x xs)
              (let ((z7) (octbin_tail (make cons x xs) (make cont7 k)))
                (return z7)))))))))

(define (eval f xs)
  (case f
    ((id) (return xs))
    ((cont0 k)
      (let ((z) (eval k (make cons (make 0) (make cons (make 0) (make cons (make 0) xs)))))
        (return z)))
    ((cont1 k)
      (let ((z) (eval k (make cons (make 1) (make cons (make 0) (make cons (make 0) xs)))))
        (return z)))
    ((cont2 k)
      (let ((z) (eval k (make cons (make 0) (make cons (make 1) (make cons (make 0) xs)))))
        (return z)))
    ((cont3 k)
      (let ((z) (eval k (make cons (make 1) (make cons (make 1) (make cons (make 0) xs)))))
        (return z)))
    ((cont4 k)
      (let ((z) (eval k (make cons (make 0) (make cons (make 0) (make cons (make 1) xs)))))
        (return z)))
    ((cont5 k)
      (let ((z) (eval k (make cons (make 1) (make cons (make 0) (make cons (make 1) xs)))))
        (return z)))
    ((cont6 k)
      (let ((z) (eval k (make cons (make 0) (make cons (make 1) (make cons (make 1) xs)))))
        (return z)))
    ((cont7 k)
      (let ((z) (eval k (make cons (make 1) (make cons (make 1) (make cons (make 1) xs)))))
        (return z)))))