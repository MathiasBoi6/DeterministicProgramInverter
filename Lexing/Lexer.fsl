{
module Lexer

open System;;
open FSharp.Text.Lexing;;
open System.Text;;

let mutable currentLine = 1

let newline (lexbuf: LexBuffer<_>) = 
    lexbuf.EndPos <- lexbuf.EndPos.NextLine
    lexbuf.StartPos <- lexbuf.StartPos.NextLine
}

// Regular expressions
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')


rule tokenstream = parse
// --------------------------
| "define"          { Parser.DEFINE currentLine}
| "let"             { Parser.LET currentLine}
| "case"            { Parser.CASE currentLine}
| "return"          { Parser.RETURN currentLine}
| "make"            { Parser.MAKE currentLine}
| "du"              { Parser.DUP currentLine}
| "eq"              { Parser.EQ currentLine}
// --------------------------
| '('               { Parser.LPAR currentLine }
| ')'               { Parser.RPAR currentLine }
// --------------------------
| whitespace        { tokenstream lexbuf }
| newline           { 
                        newline lexbuf; 
                        currentLine  <- currentLine + 1; 
                        tokenstream lexbuf 
                    }
// --------------------------
| ['0'-'9']*        { 
                        let num = Int32.Parse(lexbuf.Lexeme)
                        Parser.NUM (num, currentLine)
                    }
| ['a'-'z' 'A'-'Z']['a'-'z' 'A'-'Z' '0'-'9' '_' '-']*       
                    { 
                        let string = String(lexbuf.Lexeme)
                        Parser.VAR (string, currentLine)
                    }
// --------------------------
| _                 { failwith ("LexError, could not lex: " + String(lexbuf.Lexeme)) }
| eof               { Parser.EOF }